#!/usr/bin/env python3
"""
Regenerate cite-* specific-source pages with NEW layout template

This script:
1. Takes existing markdown from test_output/ (generated by ContentAssembler)
2. Applies the NEW builder/templates/layout.html template
3. Creates cite-{source}-apa/ directories
4. Saves HTML ready for deployment to production
"""
import sys
from pathlib import Path
import logging
import json
from bs4 import BeautifulSoup
import requests

# Add backend to path
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

from pseo.builder.static_generator import StaticSiteGenerator

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def compare_content(old_url, new_html_path):
    """Compare content between old production page and new generated page"""
    try:
        # Get old production page
        response = requests.get(old_url, timeout=10)
        old_soup = BeautifulSoup(response.text, 'html.parser')

        # Get new generated page
        with open(new_html_path, 'r') as f:
            new_soup = BeautifulSoup(f.read(), 'html.parser')

        # Compare titles
        old_title = old_soup.find('h1')
        new_title = new_soup.find('h1')

        if old_title and new_title:
            if old_title.text.strip() == new_title.text.strip():
                logger.info(f"  ‚úÖ Title matches: {old_title.text.strip()}")
            else:
                logger.warning(f"  ‚ö†Ô∏è  Title changed: '{old_title.text.strip()}' ‚Üí '{new_title.text.strip()}'")

        # Check mini-checker function
        old_has_async = "async function checkCitation" in response.text
        new_has_async = "async function checkCitation" in open(new_html_path).read()

        logger.info(f"  Old template async: {old_has_async}")
        logger.info(f"  New template async: {new_has_async}")

        if not old_has_async and new_has_async:
            logger.info(f"  ‚úÖ Upgraded to inline validation!")

        return True

    except Exception as e:
        logger.error(f"  ‚ùå Comparison failed: {e}")
        return False

def main():
    """Regenerate cite-* pages with NEW template"""

    logger.info("=" * 80)
    logger.info("REGENERATING CITE-* SPECIFIC-SOURCE PAGES WITH NEW TEMPLATE")
    logger.info("=" * 80)

    # Paths
    layout_file = backend_dir / "pseo" / "builder" / "templates" / "layout.html"
    md_source_dir = backend_dir / "test_output"
    output_dir = backend_dir / "test_output" / "cite_pages_updated"
    output_dir.mkdir(parents=True, exist_ok=True)

    # Load NEW layout template
    logger.info(f"\nLoading NEW template: {layout_file}")
    layout_template = layout_file.read_text()

    # Verify it has inline validation
    if "async function checkCitation" not in layout_template:
        logger.error("‚ùå Template does NOT have inline validation!")
        return False

    if "data.results[0].errors" not in layout_template:
        logger.error("‚ùå Template does NOT have correct API response parsing!")
        return False

    logger.info("‚úÖ Template has inline validation and correct API parsing")

    # Load specific sources config to get URL slugs
    config_file = backend_dir / "pseo" / "configs" / "specific_sources.json"
    with open(config_file) as f:
        sources = json.load(f)["sources"]

    # Map source IDs to URL slugs
    source_map = {
        source["id"]: source["url_slug"]
        for source in sources
    }

    logger.info(f"\nüìã Loaded {len(sources)} source configurations")

    # Find markdown files in test_output
    md_files = list(md_source_dir.glob("*.md"))

    # Filter to only specific-source markdown files
    specific_source_files = []
    for md_file in md_files:
        # Remove .md extension to get source_id
        source_name = md_file.stem
        # Normalize name (e.g., "the_guardian" ‚Üí "the_guardian")
        if source_name in source_map or source_name.replace('_', ' ').title().replace(' ', '') in [s["id"] for s in sources]:
            specific_source_files.append(md_file)

    logger.info(f"\nüìÑ Found {len(specific_source_files)} specific-source markdown files:")
    for f in specific_source_files:
        logger.info(f"  - {f.name}")

    if not specific_source_files:
        logger.warning("\n‚ö†Ô∏è  No specific-source markdown files found in test_output/")
        logger.info("Expected files like: youtube.md, wikipedia.md, cdc.md, etc.")
        return False

    # Initialize generator with NEW template
    generator = StaticSiteGenerator(
        layout_template,
        base_url="https://citationformatchecker.com"
    )

    logger.info(f"\nüî® Building pages...")

    # Copy markdown files to temp directory for building
    temp_build_dir = backend_dir / "test_output" / "temp_build"
    temp_build_dir.mkdir(parents=True, exist_ok=True)

    for md_file in specific_source_files:
        # Copy to temp directory
        import shutil
        shutil.copy(md_file, temp_build_dir / md_file.name)

    # Build all pages
    generator.build_site(str(temp_build_dir), str(output_dir))

    # Rename directories to cite-{source}-apa format
    logger.info(f"\nüì¶ Renaming to cite-* format...")

    for source in sources:
        source_id = source["id"]
        url_slug = source["url_slug"]

        # Check if output directory exists (might be how-to-cite-* or cite-*)
        possible_dirs = [
            output_dir / f"how-to-cite-{url_slug}-apa",
            output_dir / f"cite-{url_slug}-apa",
        ]

        target_dir = output_dir / f"cite-{url_slug}-apa"

        for possible_dir in possible_dirs:
            if possible_dir.exists() and possible_dir != target_dir:
                if target_dir.exists():
                    import shutil
                    shutil.rmtree(target_dir)
                possible_dir.rename(target_dir)
                logger.info(f"  ‚úÖ Created: cite-{url_slug}-apa/")

                # Compare with production
                prod_url = f"https://citationformatchecker.com/cite-{url_slug}-apa/"
                html_file = target_dir / "index.html"
                if html_file.exists():
                    compare_content(prod_url, html_file)
                break

    # Clean up temp directory
    import shutil
    shutil.rmtree(temp_build_dir)

    logger.info("\n" + "=" * 80)
    logger.info("‚úÖ REGENERATION COMPLETE!")
    logger.info("=" * 80)
    logger.info(f"\nüìÅ Output directory: {output_dir}")
    logger.info("\nGenerated pages:")
    for cite_dir in sorted(output_dir.glob("cite-*-apa")):
        logger.info(f"  - {cite_dir.name}/")

    logger.info("\nüìã Next steps for your developer:")
    logger.info("1. Review generated HTML in test_output/cite_pages_updated/")
    logger.info("2. Verify content matches production (same text, upgraded template)")
    logger.info("3. Deploy to production:")
    logger.info("   scp -r cite-{source}-apa/ deploy@178.156.161.140:/opt/citations/frontend/frontend/dist/")
    logger.info("4. Verify on production with cache-buster:")
    logger.info("   https://citationformatchecker.com/cite-{source}-apa/?v=123")

    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
